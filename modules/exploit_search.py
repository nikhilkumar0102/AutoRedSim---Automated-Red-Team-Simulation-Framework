import subprocess
import sys
import json
import os
import time
from tabulate import tabulate

# For colors
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# Banner
BANNER = f"""
{Colors.OKGREEN}{Colors.BOLD}
o-~-~ Exploit Search (SearchSploit Wrapper) ~-~-o
{Colors.WARNING}Use ethically and only on authorized systems!{Colors.END}
"""

def check_searchsploit():
    """Checks if the searchsploit tool is installed."""
    try:
        subprocess.run(["which", "searchsploit"], check=True, capture_output=True)
        return True
    except (FileNotFoundError, subprocess.CalledProcessError):
        print(f"{Colors.FAIL}[!] Error: 'searchsploit' is not installed or not in your PATH.{Colors.END}")
        print(f"{Colors.FAIL}[!] On Debian/Ubuntu, install it with: sudo apt install exploitdb{Colors.END}")
        return False

def search_exploits(search_term, target_ip=None):
    """Runs searchsploit and displays the results in a formatted table."""
    print(f"\n{Colors.OKBLUE}[*] Searching for exploits related to '{search_term}'...{Colors.END}")
    
    try:
        # Command to run searchsploit with JSON output for easy parsing
        command = ["searchsploit", "-j", search_term]
        
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            check=True,
            timeout=60
        )

        # Parse JSON output
        data = json.loads(result.stdout)
        
        if not data.get('RESULTS_EXPLOIT'):
            print(f"{Colors.OKGREEN}[*] No public exploits found for '{search_term}'.{Colors.END}")
            return []

        # Prepare table data
        headers = ["Title", "Type", "Path"]
        table_data = [[exploit.get('Title', ''), exploit.get('Type', ''), exploit.get('Path', '')] for exploit in data['RESULTS_EXPLOIT']]
        
        # Display table
        print(f"\n{Colors.HEADER}{tabulate(table_data, headers=headers, tablefmt='grid', stralign='left')}{Colors.END}")

        # Save results if user consents
        save_prompt = input(f"{Colors.OKBLUE}Save exploit search results to JSON file? (yes/no): {Colors.END}").lower()
        if save_prompt == "yes":
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            base = f"exploit_search_{search_term.replace(' ', '_')}_{timestamp}"
            json_file = f"{base}.json"
            with open(json_file, "w") as jf:
                json.dump({
                    "target_ip": target_ip or "N/A",
                    "search_term": search_term,
                    "timestamp": timestamp,
                    "exploits": data['RESULTS_EXPLOIT']
                }, jf, indent=2)
            print(f"{Colors.OKGREEN}[*] Results saved to {json_file}{Colors.END}")

        return data['RESULTS_EXPLOIT']

    except FileNotFoundError:
        check_searchsploit()
        return []
    except json.JSONDecodeError:
        print(f"{Colors.FAIL}[!] Error: Could not parse the output from searchsploit. The tool might have changed its format.{Colors.END}")
        return []
    except subprocess.TimeoutExpired:
        print(f"{Colors.FAIL}[!] Error: The search timed out after 60 seconds.{Colors.END}")
        return []
    except subprocess.CalledProcessError as e:
        print(f"{Colors.FAIL}[!] Error: searchsploit failed: {e.stderr}{Colors.END}")
        return []
    except Exception as e:
        print(f"{Colors.FAIL}[!] An unexpected error occurred: {e}{Colors.END}")
        return []

def main():
    """Main function to run the exploit searcher."""
    print(BANNER)

    if not check_searchsploit():
        sys.exit(1)

    search_term = input(f"{Colors.OKBLUE}Enter a service, version, or CVE to search for exploits (e.g., 'vsftpd 2.3.4' or 'CVE-2011-2523'): {Colors.END}").strip()
    if not search_term:
        print(f"{Colors.FAIL}[!] Search term cannot be empty.{Colors.END}")
        sys.exit(1)

    search_exploits(search_term)

if __name__ == "__main__":
    main()
